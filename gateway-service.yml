spring:
  cloud:
    gateway:
      routes:
        # oauth2 login
        - id: auth-oauth2-login
          uri: lb://auth-service
          predicates:
            - Path=/oauth2/authorization/**

        - id: auth-oauth2-callback
          uri: lb://auth-service
          predicates:
            - Path=/login/oauth2/code/**

        # 로그아웃 (로그인 필요)
        - id: auth-logout
          uri: lb://auth-service
          predicates:
            - Path=/auth/logout
            - Method=POST
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 회원가입, 로그인, 토큰 재발급
        - id: auth-general
          uri: lb://auth-service
          predicates:
            - Path=/auth/**

        # 유저 블로그 조회 (비로그인 가능)
        - id: user-blog
          uri: lb://user-service
          predicates:
            - Path=/users/*/blog
            - Method=GET

        # 내 프로필 조회 (로그인 필요)
        - id: user-profile
          uri: lb://user-service
          predicates:
            - Path=/users/me
            - Method=GET
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 내 프로필 수정 (로그인 필요)
        - id: user-profile-update
          uri: lb://user-service
          predicates:
            - Path=/users/me
            - Method=PATCH
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 이미지 업로드는 multipart/form-data 를 사용하므로, Gateway 설정에 따라
        # spring.servlet.multipart.max-file-size 등을 추가할 수 있다.
        # 프로필 이미지 업로드 (로그인 필요)
        - id: user-profile-image-upload
          uri: lb://user-service
          predicates:
            - Path=/users/me/profile-image
            - Method=PATCH
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 프로필 이미지 삭제 (로그인 필요)
        - id: user-profile-image-delete
          uri: lb://user-service
          predicates:
            - Path=/users/me/profile-image
            - Method=DELETE filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 좋아요 누른 글 목록 조회 (로그인 필요)
        - id: user-liked-posts
          uri: lb://user-service
          predicates:
            - Path=/users/me/liked-posts
            - Method=GET
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 회원 탈퇴 (로그인 필요)
        - id: user-delete
          uri: lb://user-service
          predicates:
            - Path=/users/me
            - Method=DELETE
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 전체 게시글 목록 조회 (비로그인 가능)
        - id: post-list
          uri: lb://post-service
          predicates:
            - Path=/posts
            - Method=GET

        # 게시글 단건 조회 (비로그인 가능)
        - id: post-detail
          uri: lb://post-service
          predicates:
            - Path=/posts/*
            - Method=GET

        # 게시글 작성 (로그인 필요)
        - id: post-create
          uri: lb://post-service
          predicates:
            - Path=/posts
            - Method=POST
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 게시글 수정 (로그인 필요)
        - id: post-update
          uri: lb://post-service
          predicates:
            - Path=/posts/*
            - Method=PATCH
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 게시글 삭제 (로그인 필요)
        - id: post-delete
          uri: lb://post-service
          predicates:
            - Path=/posts/*
            - Method=DELETE
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 게시글 좋아요 (로그인 필요)
        - id: post-like
          uri: lb://post-service
          predicates:
            - Path=/posts/*/like
            - Method=POST
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 게시글 좋아요 취소 (로그인 필요)
        - id: post-unlike
          uri: lb://post-service
          predicates:
            - Path=/posts/*/like
            - Method=DELETE
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 이미지 업로드 (로그인 필요)
        - id: post-image-upload
          uri: lb://post-service
          predicates:
            - Path=/posts/images
            - Method=POST
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Beare

        # 댓글 작성 (로그인 필요)
        - id: comment-create
          uri: lb://comment-service
          predicates:
            - Path=/comments
            - Method=POST
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 댓글 수정 (로그인 필요)
        - id: comment-update
          uri: lb://comment-service
          predicates:
            - Path=/comments/*
            - Method=PATCH
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 댓글 삭제 (로그인 필요)
        - id: comment-delete
          uri: lb://comment-service
          predicates:
            - Path=/comments/*
            - Method=DELETE
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 알림 목록 조회 (로그인 필요)
        - id: notification-list
          uri: lb://notification-service
          predicates:
            - Path=/notifications
            - Method=GET
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 알림 단건 읽음 처리 (로그인 필요)
        - id: notification-read-one
          uri: lb://notification-service
          predicates:
            - Path=/notifications/*/read
            - Method=PATCH
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 알림 일괄 읽음 처리 (로그인 필요)
        - id: notification-read-all
          uri: lb://notification-service
          predicates:
            - Path=/notifications/read
            - Method=PATCH
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 알림 단건 삭제 (로그인 필요)
        - id: notification-delete-one
          uri: lb://notification-service
          predicates:
            - Path=/notifications/*
            - Method=DELETE
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

        # 알림 전체 삭제 (로그인 필요)
        - id: notification-delete-all
          uri: lb://notification-service
          predicates:
            - Path=/notifications
            - Method=DELETE
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer

jwt:
  access-token-expiration: 900000 # 15 minutes millis
  refresh-token-expiration: 604800000 # 7 days millis
  public-key-pem: "{cipher}83bafbcfe4773c7e438d9493fa096e97b25cf4d08384a7266406a8452b1cace3125c7e9beec795c60119f069cb360060bf99939f9347689a8b9b231179dbfba27ee3dcac317a64b7e11eab405aad50ab791f41055a6e443903d108a97913c5102efc09c6df0065219832a6916d54630f90a52d91da0eccb24a2893ee5337d116eb3867db7f65940fde0cd328d8ced20d58470ad6bf8bdf44a85ef8a6a40c591790a7f17f4320eba8f98384ef0833e60a1fac43e0a0517715fd1df28f73be0f24a967496eb4bbe5969ce3a8f09a47c1592a23986bb8a6cab9c23dfddd412db6caa510734132223e34f064ee0dd9bb05e0ca21b131595122cc21d481fd876b8ed0816fc1c73749950d724fc7e389b8780e91f8df0a7ecf0b2bbad6a5f9b3ab0b559f3115689dc1a28b5324005c357dbe100df1374f4930da5773076e466cb58e4fb6c8bb95c0c5a6937a3bc5db2b484b41371af77514eef0c76585257480dab6a9528db77c23401be8f7fab0b52bde9dfb1a31d96642b0c294117ea3dd6e91c4062f333fb9f77530c59fd53e6f330d743523eca99896e98a87bd528202c5b7b2ddebb3f98d04245d8a3080756ed6a07a1393d9e6774db1d5628485e709da7ebaaf5f3ae7d0a0a4b1954dd25cb205500c2c44f5b7959c62e2a276009ca5773f1ff4"
