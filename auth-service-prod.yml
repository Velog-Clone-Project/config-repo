spring:
  datasource:
    url: jdbc:mariadb://192.168.1.31:3307/authdb
    driver-class-name: org.mariadb.jdbc.Driver
    username: "{cipher}7280a9708b0952015e075a3756f4107d35372eebbec18c77bb3a4f39610f926f"
    password: "{cipher}78e13431b2b550346b414c17f40151de97ecb0dde47df31957ca600303334baa"

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false # 실행되는 SQL 쿼리는 콘솔에 출력
    properties:
      hibernate:
        format_sql: false # show-sql과 함께 사용되며, SQL을 줄바꿈/들여쓰기해서 출력

  data:
    redis:
      host: 192.168.1.31
      port: 6379
      password: "{cipher}5f0df0c9e9210622c69cd20d030a29fa649af36b709f70aed1fae54f430a31be"

  security:
    oauth2:
      client:
        registration:
          kakao:
            # oauth2 인증이 끝난 후, 사용자의 브라우저가 돌아올 백엔드의 주소
            # kakao 로그인 성공 시, kakao는 인가 코드를 포함해서 redirect-uri로 브라우저를 리디렉션한다.
            # 브라우저는 다시 redirect-uri로 이동하고 인가코드를 포함한 요청을 Spring 백엔드로 전달
            # Spring Security는 이 요청을 가로채어, 인가 코드를 이용해 kakao에 Access Token을 요청한다.
            redirect-uri: http://192.168.192.2:30088/login/oauth2/code/kakao
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: "{cipher}7e56ce72ef2bd5948b8870cdba2d3cf2f959539aef9ba3b5995b32647ecbdb8c"
    password: "{cipher}d7707f6bb565630936b4e1859330420c87b66305c75476a2f190318de02dd9b8"
